{
	
	"if": {
		"scope": "c,cpp",
		"prefix": "if",
		"body": [
			"if($1)\n{\n\t$2\n}"
		],
		"description": "if"
	},
	"else": {
		"scope": "c,cpp",
		"prefix": "elif",
		"body": [
			"else if($1)\n{\n\t$2\n}"
		],
		"description": "else"
	},
	"else": {
		"scope": "c,cpp",
		"prefix": "else",
		"body": [
			"els${2|e,e if()|}\n{\n\t$1\n}"
		],
		"description": "else"
	},
	"if-else": {
		"scope": "c,cpp",
		"prefix": "ifel",
		"body": [
			"if(${1:CONDITION})\n{\n\t$2\n}\nels${4|e,e if()|}\n{\n\t$3\n}"
		],
		"description": "if-else"
	},
	"if-else if": {
		"scope": "c,cpp",
		"prefix": "ifelif",
		"body": [
			"if(${1:CONDITION})\n{\n\t$2\n}\nelse if(${2:CONDITION})\n{\n\t$4\n}"
		],
		"description": "if-elseif"
	},
	"if-else if-else": {
		"scope": "c,cpp",
		"prefix": "ifelifel",
		"body": [
			"if(${1:CONDITION})\n{\n\t$2\n}\nelse if(${3:CONDITION})\n{\n\t$4\n}\nelse\n{\n\t$5\n}"
		],
		"description": "if-elseif-else"
	},
	"Print to godot console": {
	 	"scope": "cpp",
	 	"prefix": "gp",
	 	"body": [
	 		"UtilityFunctions::print(${1:SOMETHING});"
	 	],
	 	"description": "Print to godot console"
	 },

	 "Printerr to godot console": {
		"scope": "cpp",
		"prefix": "gpe",
		"body": [
			"UtilityFunctions::printerr(\"${1:SOMETHING}\");"
		],
		"description": "Printerr to godot console"
	},
	"for": {
		"scope": "cpp",
		"prefix": "for",
		"body": [
			"for(int ${3|i,j|} = 0; ${3|i,j|} < $1; ${3|i,j|}++)\n{\n\t$2\n}"
		],
		"description": "for loop"
	},
	"foreach": {
		"scope": "cpp",
		"prefix": "fore",
		"body": [
			"for(const auto& ${2:elem}: $1)\n{\n\t$3\n}"
		],
		"description": "for-each loop"
	},
	"format": {
		"scope": "cpp",
		"prefix": "format",
		"body": [
			"for(int i = 0; i < ${1:MATRIX}.size(); i++)\nfor(int j = 0; j < ${1:MATRIX}[0].size(); j++)\n{\n\tconst SafeVec coords(i, j);\n\t$2\n}"
		],
		"description": "matrix for loop"
	},

	"Import prints": {
		"scope": "cpp",
		"prefix": "igp",
		"body": [
			"#include <godot_cpp/variant/utility_functions.hpp>"
		],
		"description": "Import printing functions to godot engine"
	},
	"bind method": {
		"scope": "cpp",
		"prefix": "bmet",
		"body": [
			"ClassDB::bind_method(D_METHOD(\"${2:METHOD_NAME}\"), &${1:CLASS_NAME}::${2:METHOD_NAME});"
		],
		"description": "Bind a method to the Godot engine"
	},
	"bind property": {
		"scope": "cpp",
		"prefix": "bprop",
		"body": [
			"ADD_PROPERTY(PropertyInfo(Variant::${1|INT,ARRAY,STRING,VECTOR2,VECTOR2I,BOOL,RECT2,DICTIONARY,FLOAT,SIGNAL,CALLABLE,VECTOR3,VECTOR4,COLOR|}, \"$2\"), \"set_$2\", \"get_$2\");"
		],
		"description": "Bind a property to the Godot engine"
	},
	"bind signal": {
		"scope": "cpp",
		"prefix": "bsig",
		"body": [
			"ADD_SIGNAL(MethodInfo(\"${1:REPLACE_ME}\"));"
		],
		"description": "Bind a signal to the Godot engine"
	},
	"const auto&": {
		"scope": "cpp",
		"prefix": "caut",
		"body": [
			"const ${2:auto}& ${1:__NAME__} "
		],
		"description": "const auto& "
	},
	"std::vector": {
		"scope": "cpp",
		"prefix": "vector",
		"body": [
			"std::vector<${1:__TYPE__}> ${2:__NAME__};"
		],
		"description": "std::vector"
	},
	"std::unordered_set": {
		"scope": "cpp",
		"prefix": "uset",
		"body": [
			"std::unordered_set<${1:__TYPE__}> ${2:__NAME__};"
		],
		"description": "std::unordered_set"
	},
	"std::unordered_map": {
		"scope": "cpp",
		"prefix": "umap",
		"body": [
			"std::unordered_map<${1:_KEY_TYPE_}, ${2:_VALUE_TYPE_}> ${3:__NAME__};"
		],
		"description": "std::unordered_map"
	},
	"std::optional": {
		"scope": "cpp",
		"prefix": "opt",
		"body": [
			"std::optional<${1:__TYPE__}> ${2:__NAME__};"
		],
		"description": "std::optional"
	},

	"#inclib": {
		"scope": "cpp",
		"prefix": "inclib",
		"body": [
			"#include <${1:__NAME__}>"
		],
		"description": "include library"
	},
	"#incloc": {
		"scope": "cpp",
		"prefix": "incloc",
		"body": [
			"#include \"${1:__NAME__}\""
		],
		"description": "include local"
	},
}
